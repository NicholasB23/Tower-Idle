This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: /*.log, /.env, /venv/, /node_modules/, /tmp/, /pycache/, /.pytest_cache/, /.coverage, /.DS_Store, /.idea/, /.vscode/, /build/, /dist/, **/.pyc, /*.pyo, /.pyd, **/.so, /*.egg, /*.egg-info/, /.git/, /migrations/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
components.json
eslint.config.js
index.html
package.json
postcss.config.js
public/favicon.svg
public/vite.svg
README.md
src/App.tsx
src/assets/icons/pickaxe.svg
src/assets/react.svg
src/components/MineArea.tsx
src/components/mines/MineShop.tsx
src/components/mines/MineYieldUpgrade.tsx
src/components/mines/RockComponent.tsx
src/components/ResourceBar.tsx
src/components/SaveManager.tsx
src/components/tabs/FarmsTab.tsx
src/components/tabs/MinesTab.tsx
src/components/tabs/SettingsTab.tsx
src/components/tabs/WorkersTab.tsx
src/components/TowerDisplay.tsx
src/components/ui/alert-dialog.tsx
src/components/ui/alert.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/input.tsx
src/components/ui/progress.tsx
src/components/ui/sheet.tsx
src/game/config/PhaserConfig.ts
src/game/generators/rockGenerator.ts
src/index.css
src/lib/saveManager.ts
src/lib/store.ts
src/lib/stores/farmStore.ts
src/lib/stores/gameLoopStore.ts
src/lib/stores/initialStore.ts
src/lib/stores/miningStore.ts
src/lib/stores/resourceStore.ts
src/lib/stores/towerStore.ts
src/lib/utils.ts
src/main.tsx
src/pages/Game.tsx
src/types/farm.types.ts
src/types/game.types.ts
src/types/mine.types.ts
src/types/phaser.types.ts
src/types/tower.types.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
# Dependencies
node_modules
.pnp
.pnp.js

# Testing
coverage
.nyc_output

# Build outputs
dist
dist-ssr
build
out
.output
stats.html

# Environment & local config
.env
.env.*
!.env.example
.local
.cache
.temp
.tmp

# Editor directories and files
*repomix-output.txt
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json.example
!.vscode/launch.json.example
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
*.swp

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Local development
/.history
.eslintcache
.stylelintcache
.turbo
tsconfig.tsbuildinfo
**/*.tsbuildinfo

# Debug files
*.heapsnapshot
*.cpuprofile

# Package manager specific
.yarn/*
!.yarn/cache
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions
.npm
.pnpm-store

# Phaser specific
*.map

# OS specific
Thumbs.db
desktop.ini

# User-generated game content
/user-saves
/saved-games

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Tower Idle</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>

================
File: package.json
================
{
  "name": "image-gen",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.474.0",
    "phaser": "^3.88.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.5",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/node": "^22.13.0",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.5.1",
    "tailwindcss": "3.4.17",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/favicon.svg
================
<svg width="64" height="64" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
    <!-- Background -->
    <rect width="64" height="64" fill="gray"/>
    <!-- Top part of T -->
    <rect x="8" y="8" width="48" height="12" fill="cyan"/>
    <rect x="14" y="20" width="36" height="6" fill="cyan"/>
    <!-- Vertical part of T -->
    <rect x="26" y="26" width="12" height="30" fill="cyan"/>
    <rect x="20" y="32" width="24" height="6" fill="cyan"/>
</svg>

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: src/App.tsx
================
// src/App.tsx
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Game from './pages/Game';

function App() {
    return (
        <BrowserRouter>
            <Routes>
                <Route path="/" element={<Game />} />
            </Routes>
        </BrowserRouter>
    );
}

export default App;

================
File: src/assets/icons/pickaxe.svg
================
<svg xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="lucide lucide-pickaxe"
>
    <path d="M14.531 12.469 6.619 20.38a1 1 0 1 1-3-3l7.912-7.912"/>
    <path d="M15.686 4.314A12.5 12.5 0 0 0 5.461 2.958 1 1 0 0 0 5.58 4.71a22 22 0 0 1 6.318 3.393"/>
    <path d="M17.7 3.7a1 1 0 0 0-1.4 0l-4.6 4.6a1 1 0 0 0 0 1.4l2.6 2.6a1 1 0 0 0 1.4 0l4.6-4.6a1 1 0 0 0 0-1.4z"/>
    <path d="M19.686 8.314a12.501 12.501 0 0 1 1.356 10.225 1 1 0 0 1-1.751-.119 22 22 0 0 0-3.393-6.319"/>
</svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/MineArea.tsx
================
import { useEffect, useState, useRef } from 'react';
import { useGameStore } from '@/lib/store';
import { Rock, generateRock, generateRocks, calculateResourceYield, calculateCurrencyYield } from '@/game/generators/rockGenerator'
import RockComponent from '@/components/mines/RockComponent';
import { cn } from '@/lib/utils';
import { RockType } from '@/types/mine.types';

const MineArea = () => {
    const [rocks, setRocks] = useState<Rock[]>([]);
    const [containerDimensions, setContainerDimensions] = useState({ width: 0, height: 0 });
    const mineAreaRef = useRef<HTMLDivElement>(null);
    const { addResource, addPoints, miningUpgrades, pickaxe, tower } = useGameStore();

    // Custom pickaxe cursor
    const cursorUrl = 'src/assets/icons/pickaxe.svg';
    const pickaxeCursorClass = {
        cursor: `url("${cursorUrl}") 16 16, auto`
    };

    // Update container dimensions
    useEffect(() => {
        if (!mineAreaRef.current) return;

        const updateDimensions = () => {
            if (mineAreaRef.current) {
                const { clientWidth, clientHeight } = mineAreaRef.current;
                setContainerDimensions({ width: clientWidth, height: clientHeight });

                // Only generate rocks on first load when rocks array is empty
                if (rocks.length === 0) {
                    setRocks(generateRocks(clientWidth, clientHeight, 10, tower.height)); // Pass tower height to the function
                }
            }
        };

        // Initial update
        updateDimensions();

        // Setup resize observer to detect container size changes
        const resizeObserver = new ResizeObserver(updateDimensions);
        resizeObserver.observe(mineAreaRef.current);

        // Cleanup
        return () => {
            if (mineAreaRef.current) {
                resizeObserver.unobserve(mineAreaRef.current);
            }
            resizeObserver.disconnect();
        };
    }, [rocks.length, pickaxe.level, tower.height]);

    const handleMineRock = (rockId: string) => {
        setRocks(prevRocks =>
            prevRocks.map(rock => {
                if (rock.id !== rockId) return rock;

                // Apply pickaxe power instead of fixed -1
                const newHealth = rock.health - pickaxe.power;

                // Rock is depleted
                if (newHealth <= 0) {
                    // Get the yield multiplier from state
                    const yieldMultiplier = miningUpgrades?.yieldMultiplier || 1;

                    // Check if it's a crystal rock
                    if (rock.rockType === RockType.CRYSTAL) {
                        // Calculate currency to add based on the crystal's resources
                        const currencyAmount = calculateCurrencyYield(rock.resources, yieldMultiplier);
                        if (currencyAmount > 0) {
                            addPoints(currencyAmount);
                        }
                    } else {
                        // Handle regular rocks as before - add resources
                        const resources = calculateResourceYield(rock.resources, yieldMultiplier);
                        Object.entries(resources).forEach(([type, amount]) => {
                            addResource(type as 'stone' | 'metal' | 'wood', amount);
                        });
                    }

                    // Generate a new rock to replace the mined one
                    if (containerDimensions.width && containerDimensions.height) {
                        const otherRocks = prevRocks.filter(r => r.id !== rockId);
                        return generateRock(
                            containerDimensions.width,
                            containerDimensions.height,
                            otherRocks,
                            tower.height  // Pass tower height to the function
                        );
                    }
                }

                // Update rock health
                return { ...rock, health: newHealth };
            })
        );
    };

    return (
        <div
            ref={mineAreaRef}
            className={cn('flex-grow w-full bg-stone-200 rounded-md relative mb-4 min-h-[300px]')}
            style={pickaxeCursorClass}
        >
            {rocks.map(rock => (
                <RockComponent
                    key={rock.id}
                    rock={rock}
                    onMine={handleMineRock}
                    containerWidth={containerDimensions.width}
                    containerHeight={containerDimensions.height}
                />
            ))}
        </div>
    )
}

export default MineArea;

================
File: src/components/mines/MineShop.tsx
================
// src/components/mines/MineShop.tsx
import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { Pickaxe, ShoppingCart, HardHat } from 'lucide-react';
import { useGameStore } from '@/lib/store';
import { PICKAXE_UPGRADES } from '@/types/mine.types';
import MineYieldUpgrades from './MineYieldUpgrade';

const MineShop = () => {
    const [open, setOpen] = useState(false);
    const { pickaxe, upgradePickaxe, canUpgradePickaxe, points } = useGameStore();

    // Find the next pickaxe upgrade
    const nextPickaxe = PICKAXE_UPGRADES.find(p => p.level === pickaxe.level + 1);

    const handleUpgrade = () => {
        upgradePickaxe();
        // Keep the dialog open to allow multiple purchases
    };

    return (
        <Sheet open={open} onOpenChange={setOpen}>
            <SheetTrigger asChild>
                <Button variant="outline" className="gap-2">
                    <ShoppingCart className="h-4 w-4" />
                    Shop
                </Button>
            </SheetTrigger>

            <SheetContent className="sm:max-w-md">
                <SheetHeader>
                    <SheetTitle className="text-center">Mine Shop</SheetTitle>
                </SheetHeader>

                <div className="grid gap-4 py-4">
                    <h3 className="font-semibold text-lg mb-2">Upgrades</h3>

                    <Card className={!canUpgradePickaxe() ? "opacity-70" : ""}>
                        <CardContent className="p-4">
                            <div className="flex justify-between items-center">
                                <div className="flex items-center gap-2">
                                    <Pickaxe className="h-6 w-6" />
                                    <div>
                                        <h4 className="font-semibold">Pickaxe Upgrade</h4>
                                        <p className="text-sm text-accent-foreground">
                                            Level {pickaxe.level} → {nextPickaxe?.level || 'MAX'}
                                        </p>
                                        {nextPickaxe && (
                                            <p className="text-xs text-green-700">
                                                +{nextPickaxe.power - pickaxe.power} damage
                                            </p>
                                        )}
                                    </div>
                                </div>

                                <div className="text-right">
                                    {nextPickaxe ? (
                                        <>
                                            <div className="text-sm font-medium mb-1">
                                                Cost: {nextPickaxe.cost} coins
                                            </div>
                                            <Button
                                                size="sm"
                                                onClick={handleUpgrade}
                                                disabled={!canUpgradePickaxe()}
                                            >
                                                {points >= nextPickaxe.cost ? 'Upgrade' : 'Not enough coins'}
                                            </Button>
                                        </>
                                    ) : (
                                        <div className="text-sm font-medium">Maximum Level</div>
                                    )}
                                </div>
                            </div>
                        </CardContent>
                    </Card>
                    <MineYieldUpgrades />
                    {/* <Card className="opacity-50">
                        <CardContent className="p-4">
                            <div className="flex justify-between items-center">
                                <div className="flex items-center gap-2">
                                    <HardHat className="h-6 w-6" />
                                    <div>
                                        <h4 className="font-semibold">Auto Miner</h4>
                                        <p className="text-sm text-muted-foreground">
                                            Mines automatically
                                        </p>
                                    </div>
                                </div>

                                <div className="text-right">
                                    <div className="text-sm font-medium mb-1">
                                        Coming soon!
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </Card> */}
                </div>
            </SheetContent>
        </Sheet>
    );
};

export default MineShop;

================
File: src/components/mines/MineYieldUpgrade.tsx
================
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { TrendingUp } from 'lucide-react';
import { useGameStore } from '@/lib/store';
import { YieldUpgrade } from '@/types/mine.types';

const MineYieldUpgrades: React.FC = () => {
    const { miningUpgrades, points, purchaseYieldUpgrade, canPurchaseYieldUpgrade, getAvailableYieldUpgrades } = useGameStore();

    // Get available upgrades
    const availableUpgrades = getAvailableYieldUpgrades();

    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">Resource Yield Upgrades</h3>
                <div className="text-sm text-green-600 font-medium">
                    Current Multiplier: {miningUpgrades?.yieldMultiplier.toFixed(2)}x
                </div>
            </div>

            {availableUpgrades.length > 0 ? (
                <div className="grid gap-3">
                    {availableUpgrades.map((upgrade) => (
                        <Card key={upgrade.id} className={!canPurchaseYieldUpgrade(upgrade.id) ? "opacity-70" : ""}>
                            <CardContent className="p-4">
                                <div className="flex justify-between items-center">
                                    <div className="flex items-center gap-2">
                                        <TrendingUp className="h-6 w-6 text-green-600" />
                                        <div>
                                            <h4 className="font-semibold">{upgrade.name}</h4>
                                            <p className="text-sm text-accent-foreground">
                                                {upgrade.description}
                                            </p>
                                            <p className="text-xs text-green-700">
                                                +{((upgrade.multiplier - 1) * 100).toFixed(0)}% resource yield
                                            </p>
                                        </div>
                                    </div>

                                    <div className="text-right">
                                        <div className="text-sm font-medium mb-1">
                                            Cost: {upgrade.cost} coins
                                        </div>
                                        <Button
                                            size="sm"
                                            onClick={() => purchaseYieldUpgrade(upgrade.id)}
                                            disabled={!canPurchaseYieldUpgrade(upgrade.id)}
                                        >
                                            {points >= upgrade.cost ? 'Purchase' : 'Not enough coins'}
                                        </Button>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>
                    ))}
                </div>
            ) : (
                <Card>
                    <CardContent className="p-4 text-center">
                        <p className="text-muted-foreground">All upgrades purchased!</p>
                    </CardContent>
                </Card>
            )}
        </div>
    );
};

export default MineYieldUpgrades;

================
File: src/components/mines/RockComponent.tsx
================
import { Progress } from '@/components/ui/progress';
import { Mountain, DollarSign } from 'lucide-react';
import { Rock } from '@/game/generators/rockGenerator';
import { ROCK_TYPES, RockType } from '@/types/mine.types';

interface RockProps {
    rock: Rock;
    onMine: (rockId: string) => void;
    containerWidth: number;
    containerHeight: number;
}

const RockComponent: React.FC<RockProps> = ({
    rock,
    onMine,
    containerWidth,
    containerHeight
}) => {
    // Convert percentage positions to actual pixels
    const x = (rock.xPercent * containerWidth) / 100;
    const y = (rock.yPercent * containerHeight) / 100;

    // Get rock configuration
    const rockConfig = ROCK_TYPES[rock.rockType];

    // Determine if this is a crystal rock
    const isCrystal = rock.rockType === RockType.CRYSTAL;

    return (
        <div
            className="absolute flex flex-col items-center"
            style={{
                left: `${x}px`,
                top: `${y}px`,
            }}
            onClick={() => onMine(rock.id)}
        >
            <div className="relative">
                <Mountain
                    size={rock.size}
                    strokeWidth="1"
                    color={rockConfig.color}
                    fill={rockConfig.fillColor}
                />

                {/* Add currency indicator for crystal rocks */}
                {isCrystal && (
                    <div className="absolute -top-2 -right-2 bg-yellow-400 rounded-full p-1 animate-pulse">
                        <DollarSign size={16} className="text-yellow-800" />
                    </div>
                )}
            </div>
            <Progress
                value={(rock.health / rock.maxHealth) * 100}
                className={`w-16 h-1 mt-1 ${isCrystal ? 'bg-yellow-200' : ''}`}
            />
        </div>
    );
};

export default RockComponent;

================
File: src/components/ResourceBar.tsx
================
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { useGameStore } from '@/lib/store';
import { Coins, TreePine, Mountain, Factory, ArrowUp } from 'lucide-react';

const ResourceBar: React.FC = () => {
    const { points, resources, production } = useGameStore();

    const resourceItems = [
        {
            name: 'Currency',
            value: points,
            icon: <Coins className="h-5 w-5 text-yellow-500" />,
            rate: null
        },
        {
            name: 'Wood',
            value: resources.wood,
            icon: <TreePine className="h-5 w-5 text-green-700" />,
            rate: production.woodRate
        },
        {
            name: 'Stone',
            value: resources.stone,
            icon: <Mountain className="h-5 w-5 text-gray-600" />,
            rate: production.stoneRate
        },
        {
            name: 'Metal',
            value: resources.metal,
            icon: <Factory className="h-5 w-5 text-blue-600" />,
            rate: production.metalRate
        }
    ];

    return (
        <Card className="mb-4">
            <CardContent className="p-4">
                <div className="grid grid-cols-4 gap-4">
                    {resourceItems.map((item, index) => (
                        <div key={index} className="flex items-center justify-center gap-2">
                            {item.icon}
                            <div className="flex flex-col">
                                <span className="text-sm font-medium">{item.name}</span>
                                <div className="flex items-center">
                                    <span className="font-bold">
                                        {typeof item.value === 'number' && item.value > 100
                                            ? Math.floor(item.value)
                                            : Number(item.value).toFixed(1)}
                                    </span>
                                    {item.rate !== null && item.rate > 0 && (
                                        <div className="ml-1 flex items-center text-xs text-green-600">
                                            <ArrowUp className="h-3 w-3" />
                                            {item.rate.toFixed(1)}/s
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            </CardContent>
        </Card>
    );
};

export default ResourceBar;

================
File: src/components/SaveManager.tsx
================
import React, { useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Download, Upload, Save } from 'lucide-react';
import { saveManager } from '@/lib/saveManager';
import { GameState } from '@/types/game.types';

interface SaveManagerProps {
    gameState: GameState;
    onLoadSave: (save: GameState) => void;
}

const SaveManager: React.FC<SaveManagerProps> = ({ gameState, onLoadSave }) => {
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [saveStatus, setSaveStatus] = React.useState<{
        show: boolean;
        message: string;
        isError: boolean;
    }>({ show: false, message: '', isError: false });

    const showStatus = (message: string, isError = false) => {
        setSaveStatus({ show: true, message, isError });
        setTimeout(() => setSaveStatus(prev => ({ ...prev, show: false })), 3000);
    };

    const handleSave = () => {
        const success = saveManager.saveToLocal(gameState);
        showStatus(
            success ? 'Game saved successfully!' : 'Failed to save game',
            !success
        );
    };

    const handleExport = () => {
        const success = saveManager.exportSave(gameState);
        showStatus(
            success ? 'Save file exported successfully!' : 'Failed to export save file',
            !success
        );
    };

    const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        const importedSave = await saveManager.importSave(file);
        if (importedSave) {
            onLoadSave(importedSave);
            showStatus('Save file imported successfully!');
        } else {
            showStatus('Failed to import save file', true);
        }

        // Reset file input
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    };

    return (
        <div className="space-y-4">
            {saveStatus.show && (
                <Alert variant={saveStatus.isError ? "destructive" : "default"}>
                    <AlertDescription>{saveStatus.message}</AlertDescription>
                </Alert>
            )}

            <div className="flex flex-wrap gap-4">
                <Button onClick={handleSave}>
                    <Save className="mr-2 h-4 w-4" />
                    Save Game
                </Button>

                <Button onClick={handleExport}>
                    <Download className="mr-2 h-4 w-4" />
                    Export Save
                </Button>

                <div className="relative">
                    <Input
                        type="file"
                        ref={fileInputRef}
                        accept=".json"
                        onChange={handleImport}
                        className="hidden"
                        id="save-file-input"
                    />
                    <Button onClick={() => fileInputRef.current?.click()}>
                        <Upload className="mr-2 h-4 w-4" />
                        Import Save
                    </Button>
                </div>
            </div>
        </div>
    );
};

export default SaveManager;

================
File: src/components/tabs/FarmsTab.tsx
================
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { AlertDialog, AlertDialogContent, AlertDialogHeader, AlertDialogTrigger, AlertDialogDescription, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { Progress } from '@/components/ui/progress';
import { Shovel } from 'lucide-react';
import { useGameStore } from '@/lib/store';
import { CropType, CROP_DETAILS } from '@/types/farm.types';

const CROPS: CropType[] = ['Wheat', 'Corn', 'Potato', 'Carrot'];

const CROP_COLORS: Record<CropType, string> = {
    Wheat: 'bg-yellow-200 hover:bg-yellow-300',
    Corn: 'bg-yellow-400 hover:bg-yellow-500',
    Potato: 'bg-yellow-900 hover:bg-yellow-950',
    Carrot: 'bg-orange-400 hover:bg-orange-500'
};

const CROP_HOVER_COLORS: Record<CropType, string> = {
    Wheat: 'bg-green-100 hover:bg-yellow-300',
    Corn: 'bg-green-100 hover:bg-yellow-500',
    Potato: 'bg-green-100 hover:bg-yellow-950',
    Carrot: 'bg-green-100 hover:bg-orange-500'
};

const CropInventory = () => {
    const { farm } = useGameStore();
    return (
        <div className="grid grid-cols-2 gap-4 mb-4">
            {Object.entries(farm.inventory).map(([crop, amount]) => (
                <Card key={crop}>
                    <CardContent className="p-4">
                        <div className="font-semibold capitalize">{crop}</div>
                        <div className="text-sm">Amount: {amount}</div>
                        {/* {CROP_DETAILS[crop.charAt(0).toUpperCase() + crop.slice(1) as CropType].effects.map((effect, idx) => (
                            <div key={idx} className="text-xs text-muted-foreground">
                                +{effect.value} {effect.type}
                            </div>
                        ))} */}
                    </CardContent>
                </Card>
            ))}
        </div>
    );
};


const FarmsTab = () => {
    const [isPlantMenuOpen, setIsPlantMenuOpen] = React.useState(false);
    const { farm, points, unlockFarmTile, plantCrop, harvestCrop, setPlantingMode } = useGameStore();

    const handleTileClick = (tileId: number) => {
        const tile = farm.tiles[tileId];

        if (!tile.unlocked && points >= tile.cost) {
            unlockFarmTile(tileId);
            return;
        }

        if (farm.isPlanting && farm.selectedCrop && points >= CROP_DETAILS[farm.selectedCrop].cost) {
            plantCrop(tileId, farm.selectedCrop);
            return;
        }

        if (tile.crop && tile.growthProgress === 1) {
            harvestCrop(tileId);
        }
    };

    const startPlanting = (crop: CropType) => {
        setPlantingMode(true, crop);
        setIsPlantMenuOpen(false);
    };

    const getTileClasses = (index: number) => {
        const tile = farm.tiles[index];
        if (!tile.unlocked) return 'cursor-pointer bg-gray-200';
        if (tile.crop) return `cursor-pointer ${CROP_COLORS[tile.crop]}`;
        return `cursor-pointer bg-green-100 ${farm.isPlanting && farm.selectedCrop ? CROP_HOVER_COLORS[farm.selectedCrop] : ''}`;
    };

    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold">Farm</h2>
                <AlertDialog open={isPlantMenuOpen}>
                    <AlertDialogTrigger asChild>
                        <Button
                            variant={farm.isPlanting ? "default" : "outline"}
                            onClick={() => setIsPlantMenuOpen(true)}
                            className="gap-2"
                        >
                            <Shovel className="h-4 w-4" />
                            Plant
                        </Button>
                    </AlertDialogTrigger>

                    <AlertDialogContent className="max-w-sm">
                        <AlertDialogHeader>
                            <AlertDialogTitle className="text-center">Choose a crop to plant</AlertDialogTitle>
                            <AlertDialogDescription hidden={true}>Meow</AlertDialogDescription>
                        </AlertDialogHeader>
                        <div className="grid grid-cols-2 gap-4 pt-6">
                            {CROPS.map(crop => (
                                <Button
                                    key={crop}
                                    onClick={() => startPlanting(crop)}
                                    className={`h-24 ${CROP_COLORS[crop]}`}
                                    disabled={points < CROP_DETAILS[crop].cost}
                                >
                                    <div className="text-center">
                                        <div>{crop}</div>
                                        <div className="text-sm">Cost: ${CROP_DETAILS[crop].cost}</div>
                                        {/* <div className="text-sm">ADD CROP EFFECT HERE</div> */}
                                    </div>
                                </Button>
                            ))}
                        </div>
                    </AlertDialogContent>
                </AlertDialog>
            </div>
            <CropInventory />
            <div className="grid grid-cols-4 gap-4">
                {farm.tiles.map((tile, index) => (
                    <Card
                        key={index}
                        className={`transition-colors ${getTileClasses(index)}`}
                        onClick={() => handleTileClick(tile.id)}
                    >
                        <CardContent className="p-4 h-24 flex flex-col items-center justify-center text-center">
                            {!tile.unlocked ? (
                                <div>
                                    <div className="font-bold">Purchase</div>
                                    <div className="text-sm">${tile.cost}</div>
                                </div>
                            ) : tile.crop ? (
                                <>
                                    <div>{tile.crop}</div>
                                    <Progress value={tile.growthProgress ? tile.growthProgress * 100 : 0} className="mt-2" />
                                </>
                            ) : (
                                'Empty'
                            )}
                        </CardContent>
                    </Card>
                ))}
            </div>
        </div>
    );
};

export default FarmsTab;

================
File: src/components/tabs/MinesTab.tsx
================
import { useGameStore } from '@/lib/store';
import MineArea from '../MineArea';
import MineShop from '../mines/MineShop';

const MinesTab = () => {
    const { pickaxe, miningUpgrades } = useGameStore();

    return (
        <div className='flex flex-col h-full'>
            <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-bold">Mines</h2>
                <div className="flex gap-2 items-center">
                    <div className="text-sm text-muted-foreground mr-2">
                        Resource Yield: {(miningUpgrades?.yieldMultiplier || 1).toFixed(2)}x
                    </div>
                    <div className="text-sm text-muted-foreground mr-2">
                        Respawn Rate: 5secs
                    </div>
                    <div className="text-sm text-muted-foreground mr-2">
                        Level {pickaxe.level} Pickaxe • {pickaxe.power} damage
                    </div>
                    <MineShop />
                </div>
            </div>
            <MineArea />
        </div>
    );
};

export default MinesTab;

================
File: src/components/tabs/SettingsTab.tsx
================
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import SaveManager from '../SaveManager';
import { GameState } from '@/types/game.types';

interface SettingsTabProps {
    gameState: GameState;
    onLoadSave: (save: GameState) => void;
}

const SettingsTab: React.FC<SettingsTabProps> = ({ gameState, onLoadSave }) => {
    return (
        <div>
            <h2 className="text-2xl font-bold mb-4">Settings</h2>
            <div className="space-y-4">
                <Card>
                    <CardContent className="p-4">
                        <h3 className="font-semibold mb-4">Save Management</h3>
                        <SaveManager gameState={gameState} onLoadSave={onLoadSave} />
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-4">
                        <h3 className="font-semibold mb-4">Game Settings</h3>
                        <div className="space-y-2">
                            <Button variant="outline" className="w-full">
                                Reset Progress
                            </Button>
                            <Button variant="outline" className="w-full">
                                Toggle Sound
                            </Button>
                            <Button variant="outline" className="w-full">
                                Toggle Notifications
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
};

export default SettingsTab;

================
File: src/components/tabs/WorkersTab.tsx
================
import { Card, CardContent } from '@/components/ui/card';

const WorkersTab = () => {
    return (
        <div>
            <h2 className="text-2xl font-bold mb-4">Workers</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                    <CardContent className="p-4">
                        <h3 className="font-semibold mb-2">Construction Worker</h3>
                        <p className="text-sm text-muted-foreground mb-2">Increases building speed by 10%</p>
                        <div className="flex justify-between items-center">
                            <span>Cost: $100</span>
                            <span>Owned: 0</span>
                        </div>
                    </CardContent>
                </Card>
                <Card>
                    <CardContent className="p-4">
                        <h3 className="font-semibold mb-2">Maintenance Worker</h3>
                        <p className="text-sm text-muted-foreground mb-2">Increases efficiency by 5%</p>
                        <div className="flex justify-between items-center">
                            <span>Cost: $150</span>
                            <span>Owned: 0</span>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
};

export default WorkersTab;

================
File: src/components/TowerDisplay.tsx
================
import { Card, CardContent } from '@/components/ui/card';
import { Building2 } from 'lucide-react';
import { TowerState } from '@/types/tower.types';

interface TowerDisplayProps {
    tower: TowerState;
}
const TowerDisplay = ({ tower }: TowerDisplayProps) => {

    const heightPercentage = (tower.height / tower.maxHeight) * 100;
    return (
        <Card className="h-full flex flex-col">
            <CardContent className="p-4 border-b">
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                        <Building2 className="h-6 w-6" />
                        <h2 className="text-xl font-bold">Tower Progress</h2>
                    </div>
                    <div className="text-right">
                        <div className="text-2xl font-bold">{
                            tower.height > 100 ? Math.floor(tower.height) : tower.height.toFixed(1)
                        }m</div>
                        <div className="text-sm text-muted-foreground">
                            +{tower.heightPerMinute}m/min
                        </div>
                    </div>
                </div>
            </CardContent>

            <CardContent className="flex-1 p-4 relative bg-muted/30">
                <div className="absolute bottom-0 left-0 right-0 bg-primary/20 transition-all duration-500"
                    style={{ height: `${heightPercentage}%` }}>
                    <div className="absolute top-0 left-0 right-0 h-2 bg-primary/40" />

                    {/* Tower Floors Visual */}
                    {Array.from({ length: Math.floor(heightPercentage / 5) }).map((_, index) => (
                        <div
                            key={index}
                            className="absolute w-full h-px bg-primary/20"
                            style={{ bottom: `${index * 5}%` }}
                        />
                    ))}
                </div>
            </CardContent>
        </Card>
    );
};

export default TowerDisplay;

================
File: src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/20",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: src/components/ui/sheet.tsx
================
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: src/game/config/PhaserConfig.ts
================
import Phaser from "phaser";

export const gameConfig = {
    type: Phaser.AUTO,
    parent: 'phaser-game',
    backgroundColor: '#87ceeb',
    scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH,
        width: 800,
        height: 600
    },
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: 0, x: 0 },
            debug: false
        }
    },
    scene: null // We'll add our scene later
};

================
File: src/game/generators/rockGenerator.ts
================
// src/game/generators/rockGenerator.ts
import { RockType, ROCK_TYPES, ResourceYield } from '@/types/mine.types';

export interface Rock {
    id: string;
    xPercent: number;
    yPercent: number;
    size: number;
    rockType: RockType;
    health: number;
    maxHealth: number;
    resources: ResourceYield[];
}

// Check if a new rock overlaps with existing rocks
export function checkRockCollision(
    newRock: Rock,
    existingRocks: Rock[],
    containerWidth: number,
    containerHeight: number
): boolean {
    // Convert percentage positions to pixel distances for collision detection
    return existingRocks.some(existing => {
        const existingX = (existing.xPercent * containerWidth) / 100;
        const existingY = (existing.yPercent * containerHeight) / 100;
        const newX = (newRock.xPercent * containerWidth) / 100;
        const newY = (newRock.yPercent * containerHeight) / 100;

        const distance = Math.sqrt(
            Math.pow(existingX - newX, 2) +
            Math.pow(existingY - newY, 2)
        );

        return distance < (existing.size + newRock.size) / 2 + 10; // Add padding
    });
}

// Random crystal rock or choose rock based on tower height
export function chooseRockType(towerHeight: number): RockType {
    let chosenRock: RockType = RockType.NORMAL;

    if (Math.random() < 0.1) {
        chosenRock = RockType.CRYSTAL;
    } else if (towerHeight <= 100) {
        chosenRock = RockType.HARD;
    } else if (towerHeight <= 1000) {
        chosenRock = RockType.GRANITE;
    } else if (towerHeight <= 10000) {
        chosenRock = RockType.GEODE;
    } else if (towerHeight <= 100000) {
        chosenRock = RockType.METEORITE;
    } else {
        chosenRock = RockType.NORMAL;
    }
    return chosenRock;
}

/**
 * Generate a single rock with position and properties
 */
export function generateRock(
    containerWidth: number,
    containerHeight: number,
    existingRocks: Rock[] = [],
    towerHeight: number = 0,
    id: string = `rock-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`
): Rock {
    // Choose rock type
    const rockType = chooseRockType(towerHeight);
    const rockConfig = ROCK_TYPES[rockType];
    const health = rockConfig.health;
    const size = 64;
    const padding = 20;

    // Try up to 10 times to find a non-overlapping position
    for (let attempt = 0; attempt < 10; attempt++) {
        // Generate positions as percentages
        const xPercent = ((padding + Math.random() * (containerWidth - size - padding * 2)) / containerWidth) * 100;
        const yPercent = ((padding + Math.random() * (containerHeight - size - padding * 2)) / containerHeight) * 100;

        const newRock = {
            id,
            xPercent,
            yPercent,
            size,
            rockType,
            health,
            maxHealth: health,
            resources: rockConfig.resources
        };

        if (!checkRockCollision(newRock, existingRocks, containerWidth, containerHeight)) {
            return newRock;
        }
    }

    // If we can't find a non-overlapping position after 10 attempts,
    // place it in a corner with adjusted size
    return {
        id,
        xPercent: (padding / containerWidth) * 100,
        yPercent: (padding / containerHeight) * 100,
        size: Math.max(size - 10, 15),
        rockType: RockType.NORMAL,
        health: 3,
        maxHealth: 3,
        resources: ROCK_TYPES[RockType.NORMAL].resources
    };
}

/**
 * Generate multiple rocks for the mining area
 */
export function generateRocks(
    containerWidth: number,
    containerHeight: number,
    count: number,
    towerHeight: number = 0
): Rock[] {
    const rocks: Rock[] = [];

    for (let i = 0; i < count; i++) {
        const rock = generateRock(
            containerWidth,
            containerHeight,
            rocks,
            towerHeight,
            `rock-${i}`
        );
        rocks.push(rock);
    }

    return rocks;
}

// Helper function to calculate resource yield from a rock
export function calculateResourceYield(resources: ResourceYield[], multiplier: number = 1): Record<string, number> {
    const result: Record<string, number> = {};

    resources.forEach(resource => {
        // Calculate a random value between min and max, then apply the multiplier
        const baseAmount = Math.floor(
            resource.min + Math.random() * (resource.max - resource.min + 1)
        );

        const amount = Math.floor(baseAmount * multiplier);

        if (amount > 0) {
            result[resource.type] = amount;
        }
    });

    return result;
}

// New function to calculate currency yield from crystal rocks
export function calculateCurrencyYield(resources: ResourceYield[], multiplier: number = 1): number {
    let currencyAmount = 0;

    resources.forEach(resource => {
        // Convert resource yields to currency
        const baseAmount = Math.floor(
            resource.min + Math.random() * (resource.max - resource.min + 1)
        );

        // Apply multiplier to the base amount
        const amount = Math.floor(baseAmount * multiplier);

        // Calculate currency based on resource type
        if (resource.type === 'stone') {
            currencyAmount += amount * 2;
        } else if (resource.type === 'metal') {
            currencyAmount += amount * 5;
        } else if (resource.type === 'wood') {
            currencyAmount += amount * 1;
        }
    });

    return currencyAmount;
}

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/lib/saveManager.ts
================
import { GameState } from "@/types/game.types";
import { TowerState } from "@/types/tower.types";

const SAVE_KEY = 'tower-game-save';

interface SaveState extends GameState {
    tower: TowerState;
    resources: {
        wood: number;
        stone: number;
        metal: number;
        workers: number;
    };
    production: {
        woodRate: number;
        stoneRate: number;
        metalRate: number;
    };
}

export const saveManager = {
    saveToLocal: (gameState: SaveState) => {
        try {
            const saveData = JSON.stringify(gameState);
            localStorage.setItem(SAVE_KEY, saveData);
            return true;
        } catch (error) {
            console.error('Failed to save game:', error);
            return false;
        }
    },

    loadFromLocal: (): SaveState | null => {
        try {
            const saveData = localStorage.getItem(SAVE_KEY);
            if (!saveData) return null;
            return JSON.parse(saveData) as SaveState;
        } catch (error) {
            console.error('Failed to load game:', error);
            return null;
        }
    },

    exportSave: (gameState: SaveState) => {
        try {
            const saveData = JSON.stringify(gameState, null, 2);
            const blob = new Blob([saveData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `tower-game-save-${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            return true;
        } catch (error) {
            console.error('Failed to export save:', error);
            return false;
        }
    },

    importSave: async (file: File): Promise<SaveState | null> => {
        try {
            const text = await file.text();
            const gameState = JSON.parse(text) as SaveState;
            console.log(gameState)

            if (!saveManager.validateSave(gameState)) {
                throw new Error('Invalid save file format');
            }

            return gameState;
        } catch (error) {
            console.error('Failed to import save:', error);
            return null;
        }
    },

    validateSave: (data: any): data is SaveState => {
        if (!data || typeof data !== 'object') return false;

        // Check for required properties
        const requiredProps = ['points', 'clickPower', 'autoClickPower', 'tower', 'resources', 'production'];
        if (!requiredProps.every(prop => prop in data)) return false;

        // Validate tower structure
        if (!data.tower || typeof data.tower !== 'object') return false;
        if (!('height' in data.tower && 'floors' in data.tower && 'maxFloors' in data.tower)) return false;

        // Validate resources
        if (!data.resources || typeof data.resources !== 'object') return false;
        const resourceProps = ['wood', 'stone', 'metal', 'workers'];
        if (!resourceProps.every(prop => typeof data.resources[prop] === 'number')) return false;

        // Validate production rates
        if (!data.production || typeof data.production !== 'object') return false;
        const productionProps = ['woodRate', 'stoneRate', 'metalRate'];
        if (!productionProps.every(prop => typeof data.production[prop] === 'number')) return false;

        return true;
    }
};

================
File: src/lib/store.ts
================
// src/lib/store.ts
import { create } from 'zustand'
import { createFarmStore, FarmStore } from './stores/farmStore'
import { createTowerStore, TowerStore } from './stores/towerStore'
import { createResourceStore, ResourceStore } from './stores/resourceStore'
import { createGameLoopStore, GameLoopStore } from './stores/gameLoopStore'
import { createMiningStore, MiningStore } from './stores/miningStore'
import { saveManager } from './saveManager'
import { INITIAL_STATE } from './stores/initialStore'
import { GameState } from '@/types/game.types'


export interface SaveActions {
    save: () => void;
    load: () => void;
    loadFromFile: (saveFile: GameState) => void;
}

export interface BasicActions {
    addPoints: (amount: number) => void;
    spendPoints: (amount: number) => void;
}

export type GameStore = GameState &
    FarmStore &
    TowerStore &
    ResourceStore &
    GameLoopStore &
    MiningStore &
    SaveActions &
    BasicActions;

export const useGameStore = create<GameStore>((set, get) => ({
    ...INITIAL_STATE,
    ...createFarmStore(get, set),
    ...createTowerStore(get, set),
    ...createResourceStore(get, set),
    ...createGameLoopStore(get, set),
    ...createMiningStore(get, set),

    // Save management remains in the main store
    save: () => {
        const state = get();
        saveManager.saveToLocal(state);
    },

    // Load the local browser storage save
    load: () => {
        const savedState = saveManager.loadFromLocal();
        if (savedState) {
            set(savedState);
        }
    },

    // Load save file from upload
    loadFromFile: (saveFile: any) => {
        if (saveFile) {
            set(saveFile);
        }
    },

    // Basic actions that don't fit in other stores
    addPoints: (amount: number) => set((state: any) => ({
        points: state.points + amount
    })),

    spendPoints: (amount: number) => set((state: any) => ({
        points: state.points - amount
    }))
}));

// Start the game loop when the store is created
useGameStore.getState().startGameLoop();

================
File: src/lib/stores/farmStore.ts
================
import { CropType, CROP_DETAILS } from '@/types/farm.types'

export interface FarmStore {
    unlockFarmTile: (tileId: number) => void;
    plantCrop: (tileId: number, crop: CropType) => void;
    harvestCrop: (tileId: number) => void;
    setPlantingMode: (isPlanting: boolean, selectedCrop?: CropType | null) => void;
    updateFarmGrowth: () => void;
}

export const createFarmStore = (_get: any, set: any): FarmStore => ({
    unlockFarmTile: (tileId: number) => set((state: any) => {
        const tile = state.farm.tiles.find((t: any) => t.id === tileId);
        if (!tile || tile.unlocked || state.points < tile.cost) return state;

        return {
            points: state.points - tile.cost,
            farm: {
                ...state.farm,
                tiles: state.farm.tiles.map((t: any) =>
                    t.id === tileId ? { ...tile, unlocked: true } : t
                )
            }
        };
    }),

    plantCrop: (tileId: number, crop: CropType) => set((state: any) => ({
        points: state.points - CROP_DETAILS[crop].cost,
        farm: {
            ...state.farm,
            tiles: state.farm.tiles.map((tile: any) =>
                tile.id === tileId ? {
                    ...tile,
                    crop,
                    growthProgress: 0,
                    lastHarvested: Date.now()
                } : tile
            ),
            isPlanting: false,
            selectedCrop: null
        }
    })),

    harvestCrop: (tileId: number) => set((state: any) => {
        const tile = state.farm.tiles.find((t: any) => t.id === tileId) as { crop: CropType; };
        if (!tile?.crop) return state;

        const cropName = tile.crop.toLowerCase();

        return {
            farm: {
                ...state.farm,
                inventory: {
                    ...state.farm.inventory,
                    [cropName]: state.farm.inventory[cropName] + 1
                },
                tiles: state.farm.tiles.map((t: any) =>
                    t.id === tileId ? { ...t, crop: undefined, growthProgress: undefined } : t
                )
            }
        };
    }),

    setPlantingMode: (isPlanting: boolean, selectedCrop = null) => set((state: any) => ({
        farm: {
            ...state.farm,
            isPlanting,
            selectedCrop
        }
    })),

    updateFarmGrowth: () => set((state: any) => ({
        farm: {
            ...state.farm,
            tiles: state.farm.tiles.map((tile: any) => {
                if (!tile.crop || !tile.lastHarvested) return tile;

                const cropDetails = CROP_DETAILS[tile.crop as CropType];
                const timePassed = Date.now() - tile.lastHarvested;
                const progress = Math.min(1, timePassed / cropDetails.growthTime);

                return {
                    ...tile,
                    growthProgress: progress
                };
            })
        }
    }))
});

================
File: src/lib/stores/gameLoopStore.ts
================
import { createFarmStore } from './farmStore'
import { createTowerStore } from './towerStore'
import { createResourceStore } from './resourceStore'

export interface GameLoopStore {
    tick: () => void;
    startGameLoop: () => void;
    stopGameLoop: () => void;
}

export const createGameLoopStore = (get: any, set: any) => {
    let gameLoopInterval: number;
    let autoSaveInterval: number;

    return {
        tick: () => {
            const towerStore = createTowerStore(get, set);
            const farmStore = createFarmStore(get, set);
            const resourceStore = createResourceStore(get, set);

            // Update all game systems
            towerStore.updateTowerHeight();
            farmStore.updateFarmGrowth();
            resourceStore.updateResources();

            // Calculate income
            const floorIncome = towerStore.calculateFloorIncome();

            // Update points
            set((state: any) => ({
                points: state.points + floorIncome + state.autoClickPower
            }));
        },

        startGameLoop: () => {
            if (typeof window === 'undefined') return;

            // Game loop - 60fps
            gameLoopInterval = setInterval(() => {
                get().tick();
            }, 1000 / 60) as unknown as number;

            // Auto-save every minute
            autoSaveInterval = setInterval(() => {
                get().save();
            }, 60000) as unknown as number;
        },

        stopGameLoop: () => {
            clearInterval(gameLoopInterval);
            clearInterval(autoSaveInterval);
        }
    };
};

================
File: src/lib/stores/initialStore.ts
================
import { GameState, ProductionState, ResourceState } from '@/types/game.types'
import { FarmState } from '@/types/farm.types'
import { TowerState } from '@/types/tower.types';
import { PICKAXE_UPGRADES } from '@/types/mine.types';


const INITIAL_TOWER_STATE: TowerState = {
    height: 600,
    maxHeight: 1000,
    heightPerMinute: 10,
    floors: [],
    maxFloors: 100
}

const INITIAL_RESOURCE_STATE: ResourceState = {
    wood: 0,
    stone: 0,
    metal: 0,
    workers: 0
}

const INITIAL_PRODUCTION_STATE: ProductionState = {
    woodRate: 0,
    stoneRate: 0,
    metalRate: 0
}

const INITIAL_FARM_STATE: FarmState = {
    tiles: Array(16).fill(null).map((_, index) => ({
        id: index,
        unlocked: index === 0,
        cost: 100 * (index + 1)
    })),
    maxTiles: 16,
    selectedCrop: null,
    isPlanting: false,
    inventory: {
        max_crops: 20,
        wheat: 0,
        corn: 0,
        potato: 0,
        carrot: 0
    }
};


export const INITIAL_STATE: GameState = {
    points: 0,
    clickPower: 1,
    autoClickPower: 0,
    multipliers: [],
    tower: INITIAL_TOWER_STATE,
    resources: INITIAL_RESOURCE_STATE,
    production: INITIAL_PRODUCTION_STATE,
    farm: INITIAL_FARM_STATE,
    pickaxe: PICKAXE_UPGRADES[0],
    miningUpgrades: {
        yieldMultiplier: 1,
        purchased: []
    }
};

================
File: src/lib/stores/miningStore.ts
================
import { PICKAXE_UPGRADES, YIELD_UPGRADES, YieldUpgrade } from '@/types/mine.types';

export interface MiningStore {
    upgradePickaxe: () => void;
    canUpgradePickaxe: () => boolean;
    getNextPickaxeUpgrade: () => { level: number; power: number; cost: number } | null;

    // New functions for yield upgrades
    purchaseYieldUpgrade: (upgradeId: number) => void;
    canPurchaseYieldUpgrade: (upgradeId: number) => boolean;
    getAvailableYieldUpgrades: () => YieldUpgrade[];
}

export const createMiningStore = (get: any, set: any): MiningStore => ({
    upgradePickaxe: () => set((state: any) => {
        const currentPickaxe = state.pickaxe;
        const nextLevel = currentPickaxe.level + 1;
        const nextPickaxe = PICKAXE_UPGRADES.find(p => p.level === nextLevel);

        if (!nextPickaxe || state.points < nextPickaxe.cost) {
            return state;
        }

        return {
            points: state.points - nextPickaxe.cost,
            pickaxe: nextPickaxe
        };
    }),

    canUpgradePickaxe: () => {
        const state = get();
        const currentPickaxe = state.pickaxe;
        const nextPickaxe = PICKAXE_UPGRADES.find(p => p.level === currentPickaxe.level + 1);

        return !!nextPickaxe && state.points >= nextPickaxe.cost;
    },

    getNextPickaxeUpgrade: () => {
        const state = get();
        const currentPickaxe = state.pickaxe;
        return PICKAXE_UPGRADES.find(p => p.level === currentPickaxe.level + 1) || null;
    },

    purchaseYieldUpgrade: (upgradeId: number) => set((state: any) => {
        // Find the upgrade
        const upgrade = YIELD_UPGRADES.find(u => u.id === upgradeId);

        // Check if it exists and can be purchased
        if (!upgrade || state.points < upgrade.cost || state.miningUpgrades?.purchased.includes(upgradeId)) {
            return state;
        }

        // Calculate new yield multiplier
        const newMultiplier = state.miningUpgrades?.yieldMultiplier
            ? state.miningUpgrades.yieldMultiplier * upgrade.multiplier
            : upgrade.multiplier;

        // Update state
        return {
            points: state.points - upgrade.cost,
            miningUpgrades: {
                ...state.miningUpgrades || { yieldMultiplier: 1, purchased: [] },
                yieldMultiplier: newMultiplier,
                purchased: [...(state.miningUpgrades?.purchased || []), upgradeId]
            }
        };
    }),

    canPurchaseYieldUpgrade: (upgradeId: number) => {
        const state = get();
        const upgrade = YIELD_UPGRADES.find(u => u.id === upgradeId);

        return !!upgrade &&
            state.points >= upgrade.cost &&
            !(state.miningUpgrades?.purchased || []).includes(upgradeId);
    },

    getAvailableYieldUpgrades: () => {
        const state = get();
        const purchasedUpgrades = state.miningUpgrades?.purchased || [];

        // Filter out purchased upgrades and sort by cost
        return YIELD_UPGRADES
            .filter(upgrade => !purchasedUpgrades.includes(upgrade.id))
            .sort((a, b) => a.cost - b.cost);
    }
});

================
File: src/lib/stores/resourceStore.ts
================
import { ResourceType, ProductionType } from '@/types/game.types'

export interface ResourceStore {
    addResource: (resource: ResourceType, amount: number) => void;
    setProductionRate: (resource: ProductionType, rate: number) => void;
    updateResources: () => void;
}

export const createResourceStore = (_get: any, set: any): ResourceStore => ({
    addResource: (resource: ResourceType, amount: number) => set((state: any) => ({
        resources: {
            ...state.resources,
            [resource]: state.resources[resource] + amount
        }
    })),

    setProductionRate: (resource: ProductionType, rate: number) => set((state: any) => ({
        production: {
            ...state.production,
            [resource]: rate
        }
    })),

    updateResources: () => set((state: any) => ({
        resources: {
            wood: state.resources.wood + state.production.woodRate,
            stone: state.resources.stone + state.production.stoneRate,
            metal: state.resources.metal + state.production.metalRate,
            workers: state.resources.workers
        }
    }))
});

================
File: src/lib/stores/towerStore.ts
================
import { FloorType, Floor } from '@/types/tower.types'

export interface TowerStore {
    addFloor: (type: FloorType) => void;
    upgradeFloor: (floorId: number, upgradeId: number) => void;
    updateTowerHeight: () => void;
    calculateFloorIncome: () => number;
}

// Helper function to determine base income for different floor types
function getBaseIncomeForType(type: FloorType): number {
    switch (type) {
        case FloorType.RESIDENTIAL:
            return 5
        case FloorType.COMMERCIAL:
            return 10
        case FloorType.SPECIAL:
            return 25
        default:
            return 1
    }
}

export const createTowerStore = (get: any, set: any): TowerStore => ({
    addFloor: (type: FloorType) => set((state: any) => {
        const newFloor: Floor = {
            id: state.tower.floors.length,
            level: 1,
            type,
            income: getBaseIncomeForType(type),
            upgrades: []
        }

        return {
            tower: {
                ...state.tower,
                height: state.tower.height + 10,
                floors: [...state.tower.floors, newFloor]
            }
        }
    }),

    upgradeFloor: (floorId: number, upgradeId: number) => set((state: any) => ({
        tower: {
            ...state.tower,
            floors: state.tower.floors.map((floor: Floor) => {
                if (floor.id !== floorId) return floor;
                return {
                    ...floor,
                    upgrades: floor.upgrades.map(upgrade =>
                        upgrade.id !== upgradeId ? upgrade : { ...upgrade, applied: true }
                    )
                }
            })
        }
    })),

    updateTowerHeight: () => set((state: any) => ({
        tower: {
            ...state.tower,
            height: state.tower.height + state.tower.heightPerMinute / 6000
        }
    })),

    calculateFloorIncome: () => {
        const state = get();
        return state.tower.floors.reduce((total: number, floor: Floor) => {
            const baseIncome = floor.income;
            const upgradeMultiplier = floor.upgrades
                .filter(u => u.applied)
                .reduce((mult, u) => mult * u.multiplier, 1);
            return total + (baseIncome * upgradeMultiplier);
        }, 0);
    }
});

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/main.tsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/pages/Game.tsx
================
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Building, Landmark, Settings } from 'lucide-react';
import WorkersTab from '@/components/tabs/WorkersTab';
import FarmsTab from '@/components/tabs/FarmsTab';
import MinesTab from '@/components/tabs/MinesTab';
import SettingsTab from '@/components/tabs/SettingsTab';
import TowerDisplay from '@/components/TowerDisplay';
import ResourceBar from '@/components/ResourceBar'; // Import the ResourceBar component
import { useGameStore } from '@/lib/store';

const Game = () => {
    const [activeTab, setActiveTab] = React.useState('workers');
    const {
        tower,
        loadFromFile,
        load: loadSave
    } = useGameStore();

    // Load saved game on component mount
    React.useEffect(() => {
        loadSave();
    }, [loadSave]);


    return (
        <div className="container mx-auto p-4 h-screen">
            <div className="grid grid-cols-3 gap-4 h-full">
                {/* Left panel - Tower and Game */}
                <div className="col-span-1 space-y-4">
                    <TowerDisplay tower={tower} />
                </div>

                {/* Right panel - Tabs */}
                <div className="col-span-2 space-y-4">
                    {/* Resource Bar */}
                    <ResourceBar />

                    <div className="flex justify-between">
                        <div className="flex gap-2">
                            <Button
                                variant={activeTab === 'workers' ? 'default' : 'outline'}
                                onClick={() => setActiveTab('workers')}
                            >
                                <Building className="mr-2" />
                                Workers
                            </Button>
                            <Button
                                variant={activeTab === 'farms' ? 'default' : 'outline'}
                                onClick={() => setActiveTab('farms')}
                            >
                                <Landmark className="mr-2" />
                                Farms
                            </Button>
                            <Button
                                variant={activeTab === 'mines' ? 'default' : 'outline'}
                                onClick={() => setActiveTab('mines')}
                            >
                                <Building className="mr-2" />
                                Mines
                            </Button>
                        </div>
                        <Button
                            variant={activeTab === 'settings' ? 'default' : 'outline'}
                            onClick={() => setActiveTab('settings')}
                            size="icon"
                        >
                            <Settings className="h-4 w-4" />
                        </Button>
                    </div>

                    <Card className="h-[calc(100%-150px)]"> {/* Adjust height to account for ResourceBar */}
                        <CardContent className="p-6 h-full">
                            {activeTab === 'workers' && <WorkersTab />}
                            {activeTab === 'farms' && <FarmsTab />}
                            {activeTab === 'mines' && <MinesTab />}
                            {activeTab === 'settings' && (
                                <SettingsTab
                                    gameState={useGameStore.getState()}
                                    onLoadSave={loadFromFile}
                                />
                            )}
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
};

export default Game;

================
File: src/types/farm.types.ts
================
export type CropType = 'Wheat' | 'Corn' | 'Potato' | 'Carrot';

export interface CropInventory {
    max_crops: number;
    wheat: number;
    corn: number;
    potato: number;
    carrot: number;
}

export interface FarmTile {
    id: number;
    unlocked: boolean;
    crop?: CropType;
    cost: number;
    lastHarvested?: number;
    growthProgress?: number;
}

export interface FarmState {
    tiles: FarmTile[];
    maxTiles: number;
    selectedCrop: CropType | null;
    isPlanting: boolean;
    inventory: CropInventory
}

export const CROP_DETAILS: Record<CropType, {
    growthTime: number; // in milliseconds
    cost: number;
}> = {
    Wheat: { growthTime: 30000, cost: 0 },
    Corn: { growthTime: 60000, cost: 10 },
    Potato: { growthTime: 120000, cost: 20 },
    Carrot: { growthTime: 180000, cost: 35 }
};

================
File: src/types/game.types.ts
================
import { FarmState } from "./farm.types";
import { TowerState } from "./tower.types";
import { PickaxeState } from "./mine.types";

export interface GameState {
    points: number;
    clickPower: number;
    autoClickPower: number;
    multipliers: Multiplier[];
    tower: TowerState;
    resources: ResourceState;
    production: ProductionState;
    farm: FarmState;
    pickaxe: PickaxeState;
    miningUpgrades: {
        yieldMultiplier: number;
        purchased: number[];
    };
}

export interface Multiplier {
    id: number;
    name: string;
    cost: number;
    power: number;
    owned: number;
}

export interface ResourceState {
    wood: number;
    stone: number;
    metal: number;
    workers: number;
}

export interface ProductionState {
    woodRate: number;
    stoneRate: number;
    metalRate: number;
}

export type ResourceType = keyof ResourceState;
export type ProductionType = keyof ProductionState;

================
File: src/types/mine.types.ts
================
export interface PickaxeState {
    level: number;
    power: number;
    cost: number;
}

export type ResourceYield = {
    type: 'stone' | 'metal' | 'wood'; // Adding wood for potential future expansion
    min: number;
    max: number;
}

export enum RockType {
    NORMAL = 'normal',
    HARD = 'hard',
    GRANITE = 'granite',
    CRYSTAL = 'crystal',
    GEODE = 'geode',
    METEORITE = 'meteorite'
}

export interface RockTypeConfig {
    type: RockType;
    name: string;
    health: number;
    color: string;
    fillColor: string;
    resources: ResourceYield[];
}

export interface YieldUpgrade {
    id: number;
    name: string;
    description: string;
    cost: number;
    multiplier: number;
}

export interface MiningState {
    pickaxe: PickaxeState;
    yieldMultiplier: number;
    upgrades: {
        yield: YieldUpgrade[];
        purchased: number[];
    };
}

export const YIELD_UPGRADES: YieldUpgrade[] = [
    {
        id: 1,
        name: "Basic Extraction",
        description: "Improves resource extraction techniques",
        cost: 150,
        multiplier: 1.25
    },
    {
        id: 2,
        name: "Efficient Mining",
        description: "More efficient resource collection",
        cost: 500,
        multiplier: 1.5
    },
    {
        id: 3,
        name: "Advanced Techniques",
        description: "Advanced mining techniques for better yields",
        cost: 1500,
        multiplier: 1.75
    },
    {
        id: 4,
        name: "Resource Maximizer",
        description: "Maximize resource extraction from every rock",
        cost: 5000,
        multiplier: 2.0
    },
    {
        id: 5,
        name: "Crystal Resonance",
        description: "Enhance crystal value through resonance techniques",
        cost: 15000,
        multiplier: 2.5
    }
];


export const ROCK_TYPES: Record<RockType, RockTypeConfig> = {
    [RockType.NORMAL]: {
        type: RockType.NORMAL,
        name: 'Stone',
        health: 5,
        color: 'black',
        fillColor: 'gray',
        resources: [
            { type: 'stone', min: 1, max: 3 }
        ]
    },
    [RockType.HARD]: {
        type: RockType.HARD,
        name: 'Hard Rock',
        health: 10,
        color: 'black',
        fillColor: '#555555',
        resources: [
            { type: 'stone', min: 3, max: 5 }
        ]
    },
    [RockType.GRANITE]: {
        type: RockType.GRANITE,
        name: 'Granite',
        health: 15,
        color: 'black',
        fillColor: '#7E6D5A',
        resources: [
            { type: 'stone', min: 4, max: 8 },
            { type: 'metal', min: 0, max: 1 }
        ]
    },
    [RockType.CRYSTAL]: {
        type: RockType.CRYSTAL,
        name: 'Crystal',
        health: 2,
        color: '#4A6F8A',
        fillColor: '#8ACDEB',
        resources: [
            { type: 'stone', min: 3, max: 6 },
            { type: 'metal', min: 1, max: 2 }
        ]
    },
    [RockType.GEODE]: {
        type: RockType.GEODE,
        name: 'Geode',
        health: 12,
        color: '#333333',
        fillColor: '#6B4F7E',
        resources: [
            { type: 'stone', min: 2, max: 4 },
            { type: 'metal', min: 2, max: 4 }
        ]
    },
    [RockType.METEORITE]: {
        type: RockType.METEORITE,
        name: 'Meteorite',
        health: 25,
        color: 'black',
        fillColor: '#2C2C54',
        resources: [
            { type: 'stone', min: 5, max: 10 },
            { type: 'metal', min: 3, max: 8 }
        ]
    }
};

export interface RockState {
    level: number;
    resource: string;
}

export const PICKAXE_UPGRADES: PickaxeState[] = [
    { level: 1, power: 1, cost: 0 },
    { level: 2, power: 2, cost: 100 },
    { level: 3, power: 3, cost: 250 },
    { level: 4, power: 5, cost: 500 },
    { level: 5, power: 8, cost: 1000 },
    { level: 6, power: 12, cost: 2000 },
    { level: 7, power: 18, cost: 4000 },
    { level: 8, power: 25, cost: 8000 },
    { level: 9, power: 35, cost: 15000 },
    { level: 10, power: 50, cost: 25000 },
];

================
File: src/types/phaser.types.ts
================
import { GameState } from "./game.types";

export interface GameScene extends Phaser.Scene {
    updateGameState?: (points: number) => void;
    gameState?: GameState;
}

================
File: src/types/tower.types.ts
================
export interface TowerState {
    height: number;
    maxHeight: number;
    heightPerMinute: number;
    floors: Floor[];
    maxFloors: number;
}

export interface Floor {
    id: number;
    level: number;
    type: FloorType;
    income: number;
    upgrades: FloorUpgrade[];
}

export enum FloorType {
    RESIDENTIAL = 'RESIDENTIAL',
    COMMERCIAL = 'COMMERCIAL',
    SPECIAL = 'SPECIAL'
}

export interface FloorUpgrade {
    id: number;
    name: string;
    cost: number;
    multiplier: number;
    applied: boolean;
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ["class"],
    content: ["./index.html", "./src/**/*.{ts,tsx,js,jsx}"],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import path from "path"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})



================================================================
End of Codebase
================================================================
